//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/dev/Downloads/EnFuck/src/main/java/com/flipper/enparse\EnforceParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PakExplorer.Es.Antlr; 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class EnforceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		WHITESPACES=4, PREPROCESS=5, AUTO=6, AUTOPTR=7, PRIVATE=8, PROTECTED=9, 
		STATIC=10, OVERRIDE=11, PROTO=12, NATIVE=13, NOTNULL=14, EVENT=15, EXTERNAL=16, 
		REF=17, REFERENCE=18, CONST=19, OUT=20, OWNED=21, INOUT=22, MODDED=23, 
		NEW=24, DELETE=25, CLASS=26, ENUM=27, EXTENSION=28, TYPEDEF=29, RETURN=30, 
		THIS=31, SUPER=32, THREAD=33, TYPE_INT=34, TYPE_FLOAT=35, TYPE_BOOL=36, 
		TYPE_STRING=37, TYPE_VECTOR=38, VOID=39, VOLATILE=40, IF=41, ELSE=42, 
		SWITCH=43, CASE=44, BREAK=45, FOR=46, FOREACH=47, WHILE=48, CONTINUE=49, 
		DEFAULT=50, SEALED=51, LOCAL=52, OPEN_BRACE=53, CLOSE_BRACE=54, OPEN_BRACKET=55, 
		CLOSE_BRACKET=56, OPEN_PARENS=57, CLOSE_PARENS=58, DOT=59, COMMA=60, COLON=61, 
		SEMICOLON=62, QMARK=63, PLUS=64, MINUS=65, DQUOTE=66, STAR=67, DIV=68, 
		PERCENT=69, AMP=70, BITWISE_OR=71, CARET=72, BANG=73, TILDE=74, ASSIGNMENT=75, 
		LT=76, GT=77, OP_INC=78, OP_DEC=79, OP_AND=80, OP_OR=81, OP_EQ=82, OP_NE=83, 
		OP_LE=84, OP_GE=85, OP_LEFTSHIFT=86, OP_RIGHTSHIFT=87, OP_ADD_ASSIGN=88, 
		OP_SUB_ASSIGN=89, OP_MULT_ASSIGN=90, OP_DIV_ASSIGN=91, OP_OR_ASSIGN=92, 
		OP_AND_ASSIGN=93, OP_LEFTSHFT_ASSIGN=94, SPACE=95, OP_RIGHTSHFT_ASSIGN=96, 
		LITERAL_STRING=97, LITERAL_INTEGER=98, LITERAL_FLOAT=99, LITERAL_BOOLEAN=100, 
		LITERAL_NULL=101, IDENTIFIER=102, REUSED_MODIFIERS=103, FUNC_MODIFIER=104, 
		FUNC_PARAM_MODIFIER=105, VARIABLE_MODIFIER=106, CLASS_MODIFIER=107, EOL=108;
	public const int
		RULE_computationalUnit = 0, RULE_variableModifier = 1, RULE_methodModifier = 2, 
		RULE_parameterModifier = 3, RULE_classModifier = 4, RULE_globalDeclaration = 5, 
		RULE_classDeclaration = 6, RULE_classOrEnumExtension = 7, RULE_typeParameters = 8, 
		RULE_typeParameter = 9, RULE_enumDeclaration = 10, RULE_enumBody = 11, 
		RULE_enumValue = 12, RULE_annotation = 13, RULE_classBody = 14, RULE_typeDeclaration = 15, 
		RULE_methodDeclaration = 16, RULE_methodBody = 17, RULE_typeTypeOrVoid = 18, 
		RULE_fieldDeclaration = 19, RULE_variableDeclarators = 20, RULE_variableDeclarator = 21, 
		RULE_variableDeclaratorId = 22, RULE_formalParameters = 23, RULE_formalParameterList = 24, 
		RULE_formalParameter = 25, RULE_formalParameterUndefined = 26, RULE_formalParameterDefined = 27, 
		RULE_variableInitializer = 28, RULE_arrayInitializer = 29, RULE_literal = 30, 
		RULE_literalBoolean = 31, RULE_literalString = 32, RULE_literalNull = 33, 
		RULE_literalNumeric = 34, RULE_literalFloat = 35, RULE_literalInteger = 36, 
		RULE_literalVector = 37, RULE_classType = 38, RULE_block = 39, RULE_blockStatement = 40, 
		RULE_statement = 41, RULE_deleteStatment = 42, RULE_threadStatment = 43, 
		RULE_ifStatement = 44, RULE_elseStatement = 45, RULE_forStatement = 46, 
		RULE_foreachStatement = 47, RULE_whileStatement = 48, RULE_switchStatement = 49, 
		RULE_switchBlockStatementGroup = 50, RULE_switchLabel = 51, RULE_forControl = 52, 
		RULE_forInit = 53, RULE_foreachControl = 54, RULE_forEachVariableList = 55, 
		RULE_forEachVariable = 56, RULE_localVariableDeclaration = 57, RULE_localVariableDeclarationRegular = 58, 
		RULE_localVariableDeclarationAssumptuative = 59, RULE_identifier = 60, 
		RULE_parExpression = 61, RULE_parameter = 62, RULE_specificParam = 63, 
		RULE_expressionList = 64, RULE_methodCall = 65, RULE_expression = 66, 
		RULE_primary = 67, RULE_creator = 68, RULE_createdName = 69, RULE_innerCreator = 70, 
		RULE_arrayCreatorRest = 71, RULE_classCreatorRest = 72, RULE_explicitGenericInvocation = 73, 
		RULE_typeArgumentsOrDiamond = 74, RULE_nonWildcardTypeArgumentsOrDiamond = 75, 
		RULE_nonWildcardTypeArguments = 76, RULE_typeList = 77, RULE_typeListChild = 78, 
		RULE_typeType = 79, RULE_primitiveType = 80, RULE_typeArguments = 81, 
		RULE_typeArgument = 82, RULE_superSuffix = 83, RULE_explicitGenericInvocationSuffix = 84, 
		RULE_arguments = 85;
	public static readonly string[] ruleNames = {
		"computationalUnit", "variableModifier", "methodModifier", "parameterModifier", 
		"classModifier", "globalDeclaration", "classDeclaration", "classOrEnumExtension", 
		"typeParameters", "typeParameter", "enumDeclaration", "enumBody", "enumValue", 
		"annotation", "classBody", "typeDeclaration", "methodDeclaration", "methodBody", 
		"typeTypeOrVoid", "fieldDeclaration", "variableDeclarators", "variableDeclarator", 
		"variableDeclaratorId", "formalParameters", "formalParameterList", "formalParameter", 
		"formalParameterUndefined", "formalParameterDefined", "variableInitializer", 
		"arrayInitializer", "literal", "literalBoolean", "literalString", "literalNull", 
		"literalNumeric", "literalFloat", "literalInteger", "literalVector", "classType", 
		"block", "blockStatement", "statement", "deleteStatment", "threadStatment", 
		"ifStatement", "elseStatement", "forStatement", "foreachStatement", "whileStatement", 
		"switchStatement", "switchBlockStatementGroup", "switchLabel", "forControl", 
		"forInit", "foreachControl", "forEachVariableList", "forEachVariable", 
		"localVariableDeclaration", "localVariableDeclarationRegular", "localVariableDeclarationAssumptuative", 
		"identifier", "parExpression", "parameter", "specificParam", "expressionList", 
		"methodCall", "expression", "primary", "creator", "createdName", "innerCreator", 
		"arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond", 
		"nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", "typeList", 
		"typeListChild", "typeType", "primitiveType", "typeArguments", "typeArgument", 
		"superSuffix", "explicitGenericInvocationSuffix", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'auto'", "'autoptr'", "'private'", 
		"'protected'", "'static'", "'override'", "'proto'", "'native'", "'notnull'", 
		"'event'", "'external'", "'ref'", "'reference'", "'const'", "'out'", "'owned'", 
		"'inout'", "'modded'", "'new'", "'delete'", "'class'", "'enum'", "'extends'", 
		"'typedef'", "'return'", "'this'", "'super'", "'thread'", "'int'", "'float'", 
		"'bool'", "'string'", "'vector'", "'void'", "'volatile'", "'if'", "'else'", 
		"'switch'", "'case'", "'break'", "'for'", "'foreach'", "'while'", "'contine'", 
		"'default'", "'sealed'", "'local'", "'{'", "'}'", "'['", "']'", "'('", 
		"')'", "'.'", "','", "':'", "';'", "'?'", "'+'", "'-'", "'\"'", "'*'", 
		"'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", 
		"'++'", "'--'", "'&&'", "'||'", "'=='", "'!='", "'<='", "'>='", "'<<'", 
		"'>>'", "'+='", "'-='", "'*='", "'/='", "'|='", "'&='", "'<<='", "' '", 
		"'>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"WHITESPACES", "PREPROCESS", "AUTO", "AUTOPTR", "PRIVATE", "PROTECTED", 
		"STATIC", "OVERRIDE", "PROTO", "NATIVE", "NOTNULL", "EVENT", "EXTERNAL", 
		"REF", "REFERENCE", "CONST", "OUT", "OWNED", "INOUT", "MODDED", "NEW", 
		"DELETE", "CLASS", "ENUM", "EXTENSION", "TYPEDEF", "RETURN", "THIS", "SUPER", 
		"THREAD", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", "TYPE_STRING", "TYPE_VECTOR", 
		"VOID", "VOLATILE", "IF", "ELSE", "SWITCH", "CASE", "BREAK", "FOR", "FOREACH", 
		"WHILE", "CONTINUE", "DEFAULT", "SEALED", "LOCAL", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", 
		"COMMA", "COLON", "SEMICOLON", "QMARK", "PLUS", "MINUS", "DQUOTE", "STAR", 
		"DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
		"LT", "GT", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_EQ", "OP_NE", "OP_LE", 
		"OP_GE", "OP_LEFTSHIFT", "OP_RIGHTSHIFT", "OP_ADD_ASSIGN", "OP_SUB_ASSIGN", 
		"OP_MULT_ASSIGN", "OP_DIV_ASSIGN", "OP_OR_ASSIGN", "OP_AND_ASSIGN", "OP_LEFTSHFT_ASSIGN", 
		"SPACE", "OP_RIGHTSHFT_ASSIGN", "LITERAL_STRING", "LITERAL_INTEGER", "LITERAL_FLOAT", 
		"LITERAL_BOOLEAN", "LITERAL_NULL", "IDENTIFIER", "REUSED_MODIFIERS", "FUNC_MODIFIER", 
		"FUNC_PARAM_MODIFIER", "VARIABLE_MODIFIER", "CLASS_MODIFIER", "EOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EnforceParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EnforceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnforceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnforceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EnforceParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public ComputationalUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterComputationalUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitComputationalUnit(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalUnitContext computationalUnit() {
		ComputationalUnitContext _localctx = new ComputationalUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << NOTNULL) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << MODDED) | (1L << CLASS) | (1L << ENUM) | (1L << TYPEDEF) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << VOID) | (1L << VOLATILE) | (1L << SEALED) | (1L << LOCAL) | (1L << OPEN_BRACKET) | (1L << SEMICOLON))) != 0) || _la==IDENTIFIER) {
				{
				State = 174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 172;
					globalDeclaration();
					}
					break;
				case 2:
					{
					State = 173;
					typeDeclaration();
					}
					break;
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(EnforceParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnforceParser.LOCAL, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_variableModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDE() { return GetToken(EnforceParser.OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(EnforceParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(EnforceParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(EnforceParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(EnforceParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << NOTNULL) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << OWNED) | (1L << VOLATILE) | (1L << SEALED))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(EnforceParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(EnforceParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(EnforceParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(EnforceParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(EnforceParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(EnforceParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(EnforceParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(EnforceParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOPTR() { return GetToken(EnforceParser.AUTOPTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(EnforceParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(EnforceParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(EnforceParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(EnforceParser.LOCAL, 0); }
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext parameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(EnforceParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODDED() { return GetToken(EnforceParser.MODDED, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_classModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !(_la==MODDED || _la==SEALED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GlobalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterGlobalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitGlobalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDeclarationContext globalDeclaration() {
		GlobalDeclarationContext _localctx = new GlobalDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_globalDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 189;
				fieldDeclaration();
				}
				break;
			case 2:
				{
				State = 190;
				methodDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(EnforceParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrEnumExtensionContext classOrEnumExtension() {
			return GetRuleContext<ClassOrEnumExtensionContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(CLASS);
			State = 194;
			identifier();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 195;
				typeParameters();
				}
			}

			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENSION || _la==COLON) {
				{
				State = 198;
				classOrEnumExtension();
				}
			}

			State = 201;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrEnumExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(EnforceParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		public ClassOrEnumExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrEnumExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassOrEnumExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassOrEnumExtension(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrEnumExtensionContext classOrEnumExtension() {
		ClassOrEnumExtensionContext _localctx = new ClassOrEnumExtensionContext(Context, State);
		EnterRule(_localctx, 14, RULE_classOrEnumExtension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENSION || _la==COLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 204;
			typeType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(LT);
			State = 207;
			typeParameter();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 208;
				Match(COMMA);
				State = 209;
				typeParameter();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 215;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			typeTypeOrVoid();
			State = 218;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnforceParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrEnumExtensionContext classOrEnumExtension() {
			return GetRuleContext<ClassOrEnumExtensionContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(ENUM);
			State = 221;
			identifier();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENSION || _la==COLON) {
				{
				State = 222;
				classOrEnumExtension();
				}
			}

			State = 225;
			enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(EnforceParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(EnforceParser.EOL, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(OPEN_BRACE);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) {
				{
				State = 228;
				enumValue();
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 230;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (COMMA - 60)) | (1L << (SEMICOLON - 60)) | (1L << (EOL - 60)))) != 0)) {
							{
							State = 229;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (COMMA - 60)) | (1L << (SEMICOLON - 60)) | (1L << (EOL - 60)))) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 232;
						enumValue();
						}
						} 
					}
					State = 237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==SEMICOLON) {
					{
					State = 238;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
			}

			State = 243;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			identifier();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 246;
				Match(ASSIGNMENT);
				State = 247;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(EnforceParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(EnforceParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 26, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(OPEN_BRACKET);
			State = 251;
			expression(0);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 252;
				Match(COMMA);
				State = 253;
				expression(0);
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 259;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext[] globalDeclaration() {
			return GetRuleContexts<GlobalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalDeclarationContext globalDeclaration(int i) {
			return GetRuleContext<GlobalDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(OPEN_BRACE);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << NOTNULL) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << VOID) | (1L << VOLATILE) | (1L << SEALED) | (1L << LOCAL) | (1L << OPEN_BRACKET) | (1L << SEMICOLON))) != 0) || _la==IDENTIFIER) {
				{
				State = 264;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEMICOLON:
					{
					State = 262;
					Match(SEMICOLON);
					}
					break;
				case AUTOPTR:
				case PRIVATE:
				case PROTECTED:
				case STATIC:
				case OVERRIDE:
				case PROTO:
				case NATIVE:
				case NOTNULL:
				case EVENT:
				case EXTERNAL:
				case REF:
				case REFERENCE:
				case CONST:
				case OWNED:
				case TYPEDEF:
				case TYPE_INT:
				case TYPE_FLOAT:
				case TYPE_BOOL:
				case TYPE_STRING:
				case TYPE_VECTOR:
				case VOID:
				case VOLATILE:
				case SEALED:
				case LOCAL:
				case OPEN_BRACKET:
				case IDENTIFIER:
					{
					State = 263;
					globalDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 269;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier() {
			return GetRuleContext<ClassModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeDeclaration);
		int _la;
		try {
			int _alt;
			State = 288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODDED:
			case CLASS:
			case ENUM:
			case SEALED:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 271;
					annotation();
					}
				}

				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MODDED || _la==SEALED) {
					{
					State = 274;
					classModifier();
					}
				}

				State = 279;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 277;
					classDeclaration();
					}
					break;
				case ENUM:
					{
					State = 278;
					enumDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 281;
						Match(SEMICOLON);
						}
						} 
					}
					State = 286;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EnforceParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 290;
				annotation();
				}
			}

			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << OVERRIDE) | (1L << PROTO) | (1L << NATIVE) | (1L << NOTNULL) | (1L << EVENT) | (1L << EXTERNAL) | (1L << REF) | (1L << OWNED) | (1L << VOLATILE) | (1L << SEALED))) != 0)) {
				{
				{
				State = 293;
				methodModifier();
				}
				}
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 299;
			typeTypeOrVoid();
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TILDE) {
				{
				State = 300;
				Match(TILDE);
				}
			}

			State = 303;
			identifier();
			State = 304;
			formalParameters();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE) {
				{
				State = 305;
				methodBody();
				}
			}

			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 308;
					Match(SEMICOLON);
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(EnforceParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeTypeOrVoid);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_fieldDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 320;
				annotation();
				}
			}

			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 323;
				variableModifier();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 329;
			typeType();
			State = 330;
			variableDeclarators();
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 331;
					Match(SEMICOLON);
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 40, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			variableDeclarator();
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 338;
				Match(COMMA);
				State = 339;
				variableDeclarator();
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 42, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			variableDeclaratorId();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 346;
				Match(ASSIGNMENT);
				State = 347;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(EnforceParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(EnforceParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(EnforceParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(EnforceParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 44, RULE_variableDeclaratorId);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			identifier();
			State = 358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 351;
					Match(OPEN_BRACKET);
					State = 353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
						{
						State = 352;
						variableInitializer();
						}
					}

					State = 355;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 46, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(OPEN_PARENS);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << VOID) | (1L << LOCAL))) != 0) || _la==IDENTIFIER) {
				{
				State = 362;
				formalParameterList();
				}
			}

			State = 365;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 367;
			formalParameter();
			}
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 368;
				Match(COMMA);
				State = 369;
				formalParameter();
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterDefinedContext formalParameterDefined() {
			return GetRuleContext<FormalParameterDefinedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterUndefinedContext formalParameterUndefined() {
			return GetRuleContext<FormalParameterUndefinedContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 375;
				formalParameterDefined();
				}
				break;
			case 2:
				{
				State = 376;
				formalParameterUndefined();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterUndefinedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FormalParameterUndefinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterUndefined; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterUndefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterUndefined(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterUndefinedContext formalParameterUndefined() {
		FormalParameterUndefinedContext _localctx = new FormalParameterUndefinedContext(Context, State);
		EnterRule(_localctx, 52, RULE_formalParameterUndefined);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 379;
				parameterModifier();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 385;
			typeTypeOrVoid();
			State = 386;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterDefinedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext[] parameterModifier() {
			return GetRuleContexts<ParameterModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterModifierContext parameterModifier(int i) {
			return GetRuleContext<ParameterModifierContext>(i);
		}
		public FormalParameterDefinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterDefined; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterDefined(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterDefined(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterDefinedContext formalParameterDefined() {
		FormalParameterDefinedContext _localctx = new FormalParameterDefinedContext(Context, State);
		EnterRule(_localctx, 54, RULE_formalParameterDefined);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << CONST) | (1L << OUT) | (1L << OWNED) | (1L << INOUT) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 388;
				parameterModifier();
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394;
			typeTypeOrVoid();
			State = 395;
			variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 56, RULE_variableInitializer);
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397;
				arrayInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 58, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(OPEN_BRACE);
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 402;
				variableInitializer();
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 403;
						Match(COMMA);
						State = 404;
						variableInitializer();
						}
						} 
					}
					State = 409;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				}
			}

			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 412;
				Match(COMMA);
				}
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 418;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNumericContext literalNumeric() {
			return GetRuleContext<LiteralNumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralVectorContext literalVector() {
			return GetRuleContext<LiteralVectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBooleanContext literalBoolean() {
			return GetRuleContext<LiteralBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralNullContext literalNull() {
			return GetRuleContext<LiteralNullContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_literal);
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				literalNumeric();
				}
				break;
			case OPEN_PARENS:
			case DQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				literalVector();
				}
				break;
			case LITERAL_BOOLEAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 422;
				literalBoolean();
				}
				break;
			case LITERAL_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 423;
				literalString();
				}
				break;
			case LITERAL_NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 424;
				literalNull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_BOOLEAN() { return GetToken(EnforceParser.LITERAL_BOOLEAN, 0); }
		public LiteralBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralBoolean(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBooleanContext literalBoolean() {
		LiteralBooleanContext _localctx = new LiteralBooleanContext(Context, State);
		EnterRule(_localctx, 62, RULE_literalBoolean);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(LITERAL_BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_STRING() { return GetToken(EnforceParser.LITERAL_STRING, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 64, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(LITERAL_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_NULL() { return GetToken(EnforceParser.LITERAL_NULL, 0); }
		public LiteralNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNullContext literalNull() {
		LiteralNullContext _localctx = new LiteralNullContext(Context, State);
		EnterRule(_localctx, 66, RULE_literalNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(LITERAL_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralNumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		public LiteralNumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalNumeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralNumeric(this);
		}
	}

	[RuleVersion(0)]
	public LiteralNumericContext literalNumeric() {
		LiteralNumericContext _localctx = new LiteralNumericContext(Context, State);
		EnterRule(_localctx, 68, RULE_literalNumeric);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LITERAL_INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				literalInteger();
				}
				break;
			case LITERAL_FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				literalFloat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_FLOAT() { return GetToken(EnforceParser.LITERAL_FLOAT, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 70, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(LITERAL_FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL_INTEGER() { return GetToken(EnforceParser.LITERAL_INTEGER, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 72, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(LITERAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralVectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext[] literalFloat() {
			return GetRuleContexts<LiteralFloatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat(int i) {
			return GetRuleContext<LiteralFloatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(EnforceParser.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(EnforceParser.DQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(EnforceParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(EnforceParser.SPACE, i);
		}
		public LiteralVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalVector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLiteralVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLiteralVector(this);
		}
	}

	[RuleVersion(0)]
	public LiteralVectorContext literalVector() {
		LiteralVectorContext _localctx = new LiteralVectorContext(Context, State);
		EnterRule(_localctx, 74, RULE_literalVector);
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441;
				Match(OPEN_PARENS);
				State = 442;
				literalFloat();
				State = 443;
				Match(COMMA);
				State = 444;
				literalFloat();
				State = 445;
				Match(COMMA);
				State = 446;
				literalFloat();
				State = 447;
				Match(CLOSE_PARENS);
				}
				break;
			case DQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				Match(DQUOTE);
				State = 450;
				literalFloat();
				State = 451;
				Match(SPACE);
				State = 452;
				literalFloat();
				State = 453;
				Match(SPACE);
				State = 454;
				literalFloat();
				State = 455;
				Match(DQUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(EnforceParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(EnforceParser.DOT, i);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_classType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			identifier();
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 460;
				typeArguments();
				}
				break;
			}
			State = 470;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 463;
					Match(DOT);
					State = 464;
					identifier();
					State = 466;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						State = 465;
						typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(OPEN_BRACE);
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << NEW) | (1L << DELETE) | (1L << TYPEDEF) | (1L << RETURN) | (1L << THIS) | (1L << SUPER) | (1L << THREAD) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << IF) | (1L << SWITCH) | (1L << BREAK) | (1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << CONTINUE) | (1L << LOCAL) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << SEMICOLON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				{
				State = 474;
				blockStatement();
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 480;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(EnforceParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_blockStatement);
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482;
				localVariableDeclaration();
				State = 483;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public IdentifierContext identifierLabel;
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatmentContext deleteStatment() {
			return GetRuleContext<DeleteStatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadStatmentContext threadStatment() {
			return GetRuleContext<ThreadStatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(EnforceParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(EnforceParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(EnforceParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_statement);
		try {
			int _alt;
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488;
				deleteStatment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489;
				threadStatment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 490;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 491;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 492;
				foreachStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 493;
				whileStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 494;
				switchStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 495;
				_localctx.blockLabel = block();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 496;
				Match(RETURN);
				State = 498;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 497;
					expression(0);
					}
					break;
				}
				State = 503;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 500;
						Match(SEMICOLON);
						}
						} 
					}
					State = 505;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 506;
				Match(BREAK);
				State = 510;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 507;
						Match(SEMICOLON);
						}
						} 
					}
					State = 512;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 513;
				Match(CONTINUE);
				State = 517;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 514;
						Match(SEMICOLON);
						}
						} 
					}
					State = 519;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 520;
				_localctx.statementExpression = expression(0);
				State = 524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 521;
						Match(SEMICOLON);
						}
						} 
					}
					State = 526;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 527;
				_localctx.identifierLabel = identifier();
				State = 528;
				Match(COLON);
				State = 529;
				statement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 531;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(EnforceParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public DeleteStatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatment(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatmentContext deleteStatment() {
		DeleteStatmentContext _localctx = new DeleteStatmentContext(Context, State);
		EnterRule(_localctx, 84, RULE_deleteStatment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 534;
			Match(DELETE);
			State = 535;
			expression(0);
			State = 539;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 536;
					Match(SEMICOLON);
					}
					} 
				}
				State = 541;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadStatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD() { return GetToken(EnforceParser.THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public ThreadStatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadStatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterThreadStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitThreadStatment(this);
		}
	}

	[RuleVersion(0)]
	public ThreadStatmentContext threadStatment() {
		ThreadStatmentContext _localctx = new ThreadStatmentContext(Context, State);
		EnterRule(_localctx, 86, RULE_threadStatment);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(THREAD);
			State = 543;
			expression(0);
			State = 547;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 544;
					Match(SEMICOLON);
					}
					} 
				}
				State = 549;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(EnforceParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(IF);
			State = 551;
			parExpression();
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 552;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 553;
				block();
				}
				break;
			}
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 556;
				elseStatement();
				}
				break;
			}
			State = 562;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 559;
					Match(SEMICOLON);
					}
					} 
				}
				State = 564;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(EnforceParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(ELSE);
			State = 568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 566;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 567;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(EnforceParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			Match(FOR);
			State = 571;
			Match(OPEN_PARENS);
			State = 572;
			forControl();
			State = 573;
			Match(CLOSE_PARENS);
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 574;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 575;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(EnforceParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForeachControlContext foreachControl() {
			return GetRuleContext<ForeachControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_foreachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(FOREACH);
			State = 579;
			Match(OPEN_PARENS);
			State = 580;
			foreachControl();
			State = 581;
			Match(CLOSE_PARENS);
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 582;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 583;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(EnforceParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(WHILE);
			State = 587;
			parExpression();
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 588;
				blockStatement();
				}
				break;
			case 2:
				{
				State = 589;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(EnforceParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(EnforceParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(EnforceParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_switchStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(SWITCH);
			State = 593;
			parExpression();
			State = 594;
			Match(OPEN_BRACE);
			State = 598;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 595;
					switchBlockStatementGroup();
					}
					} 
				}
				State = 600;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 601;
				switchLabel();
				}
				}
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 607;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 100, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 609;
				switchLabel();
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 614;
				blockStatement();
				}
				}
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << NEW) | (1L << DELETE) | (1L << TYPEDEF) | (1L << RETURN) | (1L << THIS) | (1L << SUPER) | (1L << THREAD) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << IF) | (1L << SWITCH) | (1L << BREAK) | (1L << FOR) | (1L << FOREACH) | (1L << WHILE) | (1L << CONTINUE) | (1L << LOCAL) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << SEMICOLON))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ExpressionContext constantExpression;
		public IToken enumConstantName;
		public IdentifierContext varName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(EnforceParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(EnforceParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 102, RULE_switchLabel);
		try {
			State = 630;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619;
				Match(CASE);
				State = 625;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 620;
					_localctx.constantExpression = expression(0);
					}
					break;
				case 2:
					{
					State = 621;
					_localctx.enumConstantName = Match(IDENTIFIER);
					}
					break;
				case 3:
					{
					State = 622;
					typeType();
					State = 623;
					_localctx.varName = identifier();
					}
					break;
				}
				State = 627;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628;
				Match(DEFAULT);
				State = 629;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionListContext forUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(EnforceParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(EnforceParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 104, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << NEW) | (1L << TYPEDEF) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << LOCAL) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 632;
				forInit();
				}
			}

			State = 635;
			Match(SEMICOLON);
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 636;
				expression(0);
				}
			}

			State = 639;
			Match(SEMICOLON);
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 640;
				_localctx.forUpdate = expressionList();
				}
			}

			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 643;
				Match(SEMICOLON);
				}
				}
				State = 648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 106, RULE_forInit);
		try {
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 649;
				localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 650;
				expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableListContext forEachVariableList() {
			return GetRuleContext<ForEachVariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForeachControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForeachControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForeachControl(this);
		}
	}

	[RuleVersion(0)]
	public ForeachControlContext foreachControl() {
		ForeachControlContext _localctx = new ForeachControlContext(Context, State);
		EnterRule(_localctx, 108, RULE_foreachControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			forEachVariableList();
			State = 654;
			Match(COLON);
			State = 655;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableContext[] forEachVariable() {
			return GetRuleContexts<ForEachVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachVariableContext forEachVariable(int i) {
			return GetRuleContext<ForEachVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public ForEachVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForEachVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForEachVariableList(this);
		}
	}

	[RuleVersion(0)]
	public ForEachVariableListContext forEachVariableList() {
		ForEachVariableListContext _localctx = new ForEachVariableListContext(Context, State);
		EnterRule(_localctx, 110, RULE_forEachVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			forEachVariable();
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 658;
				Match(COMMA);
				State = 659;
				forEachVariable();
				}
				}
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ForEachVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterForEachVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitForEachVariable(this);
		}
	}

	[RuleVersion(0)]
	public ForEachVariableContext forEachVariable() {
		ForEachVariableContext _localctx = new ForEachVariableContext(Context, State);
		EnterRule(_localctx, 112, RULE_forEachVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 665;
				variableModifier();
				}
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 673;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				{
				State = 671;
				typeType();
				}
				break;
			case AUTO:
				{
				State = 672;
				Match(AUTO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 675;
			variableDeclaratorId();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationRegularContext localVariableDeclarationRegular() {
			return GetRuleContext<LocalVariableDeclarationRegularContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationAssumptuativeContext localVariableDeclarationAssumptuative() {
			return GetRuleContext<LocalVariableDeclarationAssumptuativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 677;
				variableModifier();
				}
				}
				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				{
				State = 683;
				localVariableDeclarationRegular();
				}
				break;
			case AUTO:
				{
				State = 684;
				localVariableDeclarationAssumptuative();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationRegularContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public LocalVariableDeclarationRegularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationRegular; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationRegular(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationRegular(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationRegularContext localVariableDeclarationRegular() {
		LocalVariableDeclarationRegularContext _localctx = new LocalVariableDeclarationRegularContext(Context, State);
		EnterRule(_localctx, 116, RULE_localVariableDeclarationRegular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			typeType();
			State = 688;
			variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationAssumptuativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(EnforceParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationAssumptuativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationAssumptuative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationAssumptuative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationAssumptuative(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationAssumptuativeContext localVariableDeclarationAssumptuative() {
		LocalVariableDeclarationAssumptuativeContext _localctx = new LocalVariableDeclarationAssumptuativeContext(Context, State);
		EnterRule(_localctx, 118, RULE_localVariableDeclarationAssumptuative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(AUTO);
			State = 691;
			identifier();
			State = 692;
			Match(ASSIGNMENT);
			State = 693;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 120, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(OPEN_PARENS);
			State = 698;
			expression(0);
			State = 699;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecificParamContext specificParam() {
			return GetRuleContext<SpecificParamContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 124, RULE_parameter);
		try {
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 702;
				specificParam();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(EnforceParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpecificParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSpecificParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSpecificParam(this);
		}
	}

	[RuleVersion(0)]
	public SpecificParamContext specificParam() {
		SpecificParamContext _localctx = new SpecificParamContext(Context, State);
		EnterRule(_localctx, 126, RULE_specificParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			identifier();
			State = 706;
			Match(COLON);
			State = 707;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 128, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			parameter();
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 710;
				Match(COMMA);
				State = 711;
				parameter();
				}
				}
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(EnforceParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EnforceParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(EnforceParser.SUPER, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 130, RULE_methodCall);
		int _la;
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case BANG:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 717;
					Match(BANG);
					}
				}

				State = 720;
				identifier();
				State = 721;
				Match(OPEN_PARENS);
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
					{
					State = 722;
					expressionList();
					}
				}

				State = 725;
				Match(CLOSE_PARENS);
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727;
				Match(THIS);
				State = 728;
				Match(DOT);
				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 729;
					Match(BANG);
					}
				}

				State = 732;
				identifier();
				State = 733;
				Match(OPEN_PARENS);
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
					{
					State = 734;
					expressionList();
					}
				}

				State = 737;
				Match(CLOSE_PARENS);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 739;
				Match(SUPER);
				State = 740;
				Match(DOT);
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BANG) {
					{
					State = 741;
					Match(BANG);
					}
				}

				State = 744;
				identifier();
				State = 745;
				Match(OPEN_PARENS);
				State = 747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
					{
					State = 746;
					expressionList();
					}
				}

				State = 749;
				Match(CLOSE_PARENS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken op;
		public IToken suffix;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(EnforceParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMP() { return GetTokens(EnforceParser.AMP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP(int i) {
			return GetToken(EnforceParser.AMP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(EnforceParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(EnforceParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(EnforceParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(EnforceParser.OP_DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(EnforceParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(EnforceParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EnforceParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(EnforceParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(EnforceParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(EnforceParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(EnforceParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFTSHIFT() { return GetToken(EnforceParser.OP_LEFTSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHTSHIFT() { return GetToken(EnforceParser.OP_RIGHTSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(EnforceParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(EnforceParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(EnforceParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(EnforceParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(EnforceParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(EnforceParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(EnforceParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(EnforceParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD_ASSIGN() { return GetToken(EnforceParser.OP_ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB_ASSIGN() { return GetToken(EnforceParser.OP_SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGN() { return GetToken(EnforceParser.OP_MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGN() { return GetToken(EnforceParser.OP_DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR_ASSIGN() { return GetToken(EnforceParser.OP_OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND_ASSIGN() { return GetToken(EnforceParser.OP_AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFTSHFT_ASSIGN() { return GetToken(EnforceParser.OP_LEFTSHFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHTSHFT_ASSIGN() { return GetToken(EnforceParser.OP_RIGHTSHFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EnforceParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(EnforceParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(EnforceParser.CLOSE_BRACKET, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 132;
		EnterRecursionRule(_localctx, 132, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 754;
				primary();
				}
				break;
			case 2:
				{
				State = 755;
				methodCall();
				}
				break;
			case 3:
				{
				State = 756;
				Match(NEW);
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
					{
					{
					State = 757;
					variableModifier();
					}
					}
					State = 762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 763;
				creator();
				}
				break;
			case 4:
				{
				State = 764;
				Match(OPEN_PARENS);
				State = 765;
				typeType();
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AMP) {
					{
					{
					State = 766;
					Match(AMP);
					State = 767;
					typeType();
					}
					}
					State = 772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 773;
				Match(CLOSE_PARENS);
				State = 774;
				expression(17);
				}
				break;
			case 5:
				{
				State = 776;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 777;
				expression(15);
				}
				break;
			case 6:
				{
				State = 778;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==TILDE) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 779;
				expression(14);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 853;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 851;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 782;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 785;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IDENTIFIER:
							{
							State = 783;
							Match(IDENTIFIER);
							}
							break;
						case OPEN_PARENS:
							{
							State = 784;
							parExpression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 787;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 788;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 789;
						Match(CARET);
						State = 790;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 791;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 792;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STAR - 67)) | (1L << (DIV - 67)) | (1L << (PERCENT - 67)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 793;
						expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 794;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 795;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 796;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 797;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 798;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_LEFTSHIFT || _la==OP_RIGHTSHIFT) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 799;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 800;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 801;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (LT - 76)) | (1L << (GT - 76)) | (1L << (OP_LE - 76)) | (1L << (OP_GE - 76)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 802;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 803;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 804;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_EQ || _la==OP_NE) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 805;
						expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 806;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 807;
						_localctx.op = Match(AMP);
						State = 808;
						expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 809;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 810;
						_localctx.op = Match(TILDE);
						State = 811;
						expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 812;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 813;
						_localctx.op = Match(BITWISE_OR);
						State = 814;
						expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 815;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 816;
						_localctx.op = Match(OP_AND);
						State = 817;
						expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 818;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 819;
						_localctx.op = Match(OP_OR);
						State = 820;
						expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 821;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 822;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (ASSIGNMENT - 75)) | (1L << (OP_ADD_ASSIGN - 75)) | (1L << (OP_SUB_ASSIGN - 75)) | (1L << (OP_MULT_ASSIGN - 75)) | (1L << (OP_DIV_ASSIGN - 75)) | (1L << (OP_OR_ASSIGN - 75)) | (1L << (OP_AND_ASSIGN - 75)) | (1L << (OP_LEFTSHFT_ASSIGN - 75)) | (1L << (OP_RIGHTSHFT_ASSIGN - 75)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 823;
						expression(1);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 824;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 825;
						_localctx.op = Match(DOT);
						State = 842;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
						case 1:
							{
							State = 826;
							identifier();
							}
							break;
						case 2:
							{
							State = 827;
							methodCall();
							}
							break;
						case 3:
							{
							State = 828;
							Match(THIS);
							}
							break;
						case 4:
							{
							State = 829;
							Match(NEW);
							State = 833;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
								{
								{
								State = 830;
								variableModifier();
								}
								}
								State = 835;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 837;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==LT) {
								{
								State = 836;
								nonWildcardTypeArguments();
								}
							}

							State = 839;
							innerCreator();
							}
							break;
						case 5:
							{
							State = 840;
							superSuffix();
							}
							break;
						case 6:
							{
							State = 841;
							explicitGenericInvocation();
							}
							break;
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 844;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 845;
						Match(OPEN_BRACKET);
						State = 846;
						expression(0);
						State = 847;
						Match(CLOSE_BRACKET);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 849;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 850;
						_localctx.suffix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OP_INC || _la==OP_DEC) ) {
							_localctx.suffix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 855;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(EnforceParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 134, RULE_primary);
		try {
			State = 873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 856;
				Match(OPEN_PARENS);
				State = 857;
				expression(0);
				State = 858;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860;
				Match(THIS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 861;
				arrayInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 862;
				literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 863;
				identifier();
				State = 864;
				typeArguments();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 868;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 866;
					identifier();
					}
					break;
				case 2:
					{
					State = 867;
					primitiveType();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 870;
				nonWildcardTypeArguments();
				{
				State = 871;
				explicitGenericInvocationSuffix();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 136, RULE_creator);
		try {
			State = 884;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875;
				nonWildcardTypeArguments();
				State = 876;
				createdName();
				State = 877;
				classCreatorRest();
				}
				break;
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 879;
				createdName();
				State = 882;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 880;
					arrayCreatorRest();
					}
					break;
				case 2:
					{
					State = 881;
					classCreatorRest();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(EnforceParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(EnforceParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_createdName);
		try {
			int _alt;
			State = 901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 886;
				identifier();
				State = 888;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 887;
					typeArgumentsOrDiamond();
					}
					break;
				}
				State = 897;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 890;
						Match(DOT);
						State = 891;
						identifier();
						State = 893;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
						case 1:
							{
							State = 892;
							typeArgumentsOrDiamond();
							}
							break;
						}
						}
						} 
					}
					State = 899;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 900;
				primitiveType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 140, RULE_innerCreator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			identifier();
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 904;
				nonWildcardTypeArgumentsOrDiamond();
				}
				break;
			}
			State = 907;
			classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(EnforceParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(EnforceParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(EnforceParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(EnforceParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 142, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			Match(OPEN_BRACKET);
			State = 937;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_BRACKET:
				{
				State = 910;
				Match(CLOSE_BRACKET);
				State = 915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET) {
					{
					{
					State = 911;
					Match(OPEN_BRACKET);
					State = 912;
					Match(CLOSE_BRACKET);
					}
					}
					State = 917;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 918;
				arrayInitializer();
				}
				break;
			case NEW:
			case THIS:
			case SUPER:
			case TYPE_INT:
			case TYPE_FLOAT:
			case TYPE_BOOL:
			case TYPE_STRING:
			case TYPE_VECTOR:
			case OPEN_BRACE:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case DQUOTE:
			case BANG:
			case TILDE:
			case LT:
			case OP_INC:
			case OP_DEC:
			case LITERAL_STRING:
			case LITERAL_INTEGER:
			case LITERAL_FLOAT:
			case LITERAL_BOOLEAN:
			case LITERAL_NULL:
			case IDENTIFIER:
				{
				State = 919;
				expression(0);
				State = 920;
				Match(CLOSE_BRACKET);
				State = 927;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 921;
						Match(OPEN_BRACKET);
						State = 922;
						expression(0);
						State = 923;
						Match(CLOSE_BRACKET);
						}
						} 
					}
					State = 929;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
				}
				State = 934;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 930;
						Match(OPEN_BRACKET);
						State = 931;
						Match(CLOSE_BRACKET);
						}
						} 
					}
					State = 936;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 144, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 939;
				arguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 146, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				State = 942;
				nonWildcardTypeArguments();
				}
				break;
			}
			State = 945;
			explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 148, RULE_typeArgumentsOrDiamond);
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 947;
				Match(LT);
				State = 948;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 949;
				typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 150, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 952;
				Match(LT);
				State = 953;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 954;
				nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(EnforceParser.GT, 0); }
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 152, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			Match(LT);
			State = 958;
			typeList();
			State = 959;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeListChildContext[] typeListChild() {
			return GetRuleContexts<TypeListChildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListChildContext typeListChild(int i) {
			return GetRuleContext<TypeListChildContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 154, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			typeListChild();
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 962;
				Match(COMMA);
				State = 963;
				typeListChild();
				}
				}
				State = 968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListChildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public TypeListChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeListChild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeListChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeListChild(this);
		}
	}

	[RuleVersion(0)]
	public TypeListChildContext typeListChild() {
		TypeListChildContext _localctx = new TypeListChildContext(Context, State);
		EnterRule(_localctx, 156, RULE_typeListChild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			typeType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(EnforceParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(EnforceParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(EnforceParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(EnforceParser.CLOSE_BRACKET, i);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_typeType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 971;
				classType();
				}
				break;
			case 2:
				{
				State = 972;
				primitiveType();
				}
				break;
			}
			State = 979;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 975;
					Match(OPEN_BRACKET);
					State = 976;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 981;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(EnforceParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(EnforceParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(EnforceParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(EnforceParser.TYPE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR() { return GetToken(EnforceParser.TYPE_VECTOR, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(EnforceParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(EnforceParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(EnforceParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_RIGHTSHIFT() { return GetTokens(EnforceParser.OP_RIGHTSHIFT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHTSHIFT(int i) {
			return GetToken(EnforceParser.OP_RIGHTSHIFT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(EnforceParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(EnforceParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 162, RULE_typeArguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			Match(LT);
			{
			State = 985;
			typeArgument();
			State = 990;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 986;
					Match(COMMA);
					State = 987;
					typeArgument();
					}
					} 
				}
				State = 992;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			}
			State = 996;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 993;
					_la = TokenStream.LA(1);
					if ( !(_la==GT || _la==OP_RIGHTSHIFT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 998;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 164, RULE_typeArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOPTR) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << STATIC) | (1L << PROTO) | (1L << NOTNULL) | (1L << REF) | (1L << REFERENCE) | (1L << CONST) | (1L << OWNED) | (1L << TYPEDEF) | (1L << LOCAL))) != 0)) {
				{
				{
				State = 999;
				variableModifier();
				}
				}
				State = 1004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1005;
				typeType();
				}
				break;
			case 2:
				{
				State = 1006;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(EnforceParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterSuperSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitSuperSuffix(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 166, RULE_superSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			Match(DOT);
			State = 1010;
			methodCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
		EnterRule(_localctx, 168, RULE_explicitGenericInvocationSuffix);
		try {
			State = 1016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013;
				identifier();
				State = 1014;
				arguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(EnforceParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(EnforceParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEnforceParserListener typedListener = listener as IEnforceParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 170, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			Match(OPEN_PARENS);
			State = 1020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << THIS) | (1L << SUPER) | (1L << TYPE_INT) | (1L << TYPE_FLOAT) | (1L << TYPE_BOOL) | (1L << TYPE_STRING) | (1L << TYPE_VECTOR) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (DQUOTE - 64)) | (1L << (BANG - 64)) | (1L << (TILDE - 64)) | (1L << (LT - 64)) | (1L << (OP_INC - 64)) | (1L << (OP_DEC - 64)) | (1L << (LITERAL_STRING - 64)) | (1L << (LITERAL_INTEGER - 64)) | (1L << (LITERAL_FLOAT - 64)) | (1L << (LITERAL_BOOLEAN - 64)) | (1L << (LITERAL_NULL - 64)) | (1L << (IDENTIFIER - 64)))) != 0)) {
				{
				State = 1019;
				expressionList();
				}
			}

			State = 1022;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 66: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 21);
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 16);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,108,1025,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,1,0,1,0,5,0,175,8,0,10,0,12,0,178,9,0,1,0,1,0,1,1,1,1,1,2,1,
		2,1,3,1,3,1,4,1,4,1,5,1,5,3,5,192,8,5,1,6,1,6,1,6,3,6,197,8,6,1,6,3,6,
		200,8,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,211,8,8,10,8,12,8,214,
		9,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,3,10,224,8,10,1,10,1,10,1,11,1,
		11,1,11,3,11,231,8,11,1,11,5,11,234,8,11,10,11,12,11,237,9,11,1,11,3,11,
		240,8,11,3,11,242,8,11,1,11,1,11,1,12,1,12,1,12,3,12,249,8,12,1,13,1,13,
		1,13,1,13,5,13,255,8,13,10,13,12,13,258,9,13,1,13,1,13,1,14,1,14,1,14,
		5,14,265,8,14,10,14,12,14,268,9,14,1,14,1,14,1,15,3,15,273,8,15,1,15,3,
		15,276,8,15,1,15,1,15,3,15,280,8,15,1,15,5,15,283,8,15,10,15,12,15,286,
		9,15,1,15,3,15,289,8,15,1,16,3,16,292,8,16,1,16,5,16,295,8,16,10,16,12,
		16,298,9,16,1,16,1,16,3,16,302,8,16,1,16,1,16,1,16,3,16,307,8,16,1,16,
		5,16,310,8,16,10,16,12,16,313,9,16,1,17,1,17,1,18,1,18,3,18,319,8,18,1,
		19,3,19,322,8,19,1,19,5,19,325,8,19,10,19,12,19,328,9,19,1,19,1,19,1,19,
		5,19,333,8,19,10,19,12,19,336,9,19,1,20,1,20,1,20,5,20,341,8,20,10,20,
		12,20,344,9,20,1,21,1,21,1,21,3,21,349,8,21,1,22,1,22,1,22,3,22,354,8,
		22,1,22,5,22,357,8,22,10,22,12,22,360,9,22,1,23,1,23,3,23,364,8,23,1,23,
		1,23,1,24,1,24,1,24,5,24,371,8,24,10,24,12,24,374,9,24,1,25,1,25,3,25,
		378,8,25,1,26,5,26,381,8,26,10,26,12,26,384,9,26,1,26,1,26,1,26,1,27,5,
		27,390,8,27,10,27,12,27,393,9,27,1,27,1,27,1,27,1,28,1,28,3,28,400,8,28,
		1,29,1,29,1,29,1,29,5,29,406,8,29,10,29,12,29,409,9,29,3,29,411,8,29,1,
		29,5,29,414,8,29,10,29,12,29,417,9,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
		30,3,30,426,8,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,3,34,436,8,34,
		1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
		1,37,1,37,1,37,1,37,1,37,1,37,3,37,458,8,37,1,38,1,38,3,38,462,8,38,1,
		38,1,38,1,38,3,38,467,8,38,5,38,469,8,38,10,38,12,38,472,9,38,1,39,1,39,
		5,39,476,8,39,10,39,12,39,479,9,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,
		487,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,499,8,
		41,1,41,5,41,502,8,41,10,41,12,41,505,9,41,1,41,1,41,5,41,509,8,41,10,
		41,12,41,512,9,41,1,41,1,41,5,41,516,8,41,10,41,12,41,519,9,41,1,41,1,
		41,5,41,523,8,41,10,41,12,41,526,9,41,1,41,1,41,1,41,1,41,1,41,3,41,533,
		8,41,1,42,1,42,1,42,5,42,538,8,42,10,42,12,42,541,9,42,1,43,1,43,1,43,
		5,43,546,8,43,10,43,12,43,549,9,43,1,44,1,44,1,44,1,44,3,44,555,8,44,1,
		44,3,44,558,8,44,1,44,5,44,561,8,44,10,44,12,44,564,9,44,1,45,1,45,1,45,
		3,45,569,8,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,577,8,46,1,47,1,47,1,
		47,1,47,1,47,1,47,3,47,585,8,47,1,48,1,48,1,48,1,48,3,48,591,8,48,1,49,
		1,49,1,49,1,49,5,49,597,8,49,10,49,12,49,600,9,49,1,49,5,49,603,8,49,10,
		49,12,49,606,9,49,1,49,1,49,1,50,4,50,611,8,50,11,50,12,50,612,1,50,4,
		50,616,8,50,11,50,12,50,617,1,51,1,51,1,51,1,51,1,51,1,51,3,51,626,8,51,
		1,51,1,51,1,51,3,51,631,8,51,1,52,3,52,634,8,52,1,52,1,52,3,52,638,8,52,
		1,52,1,52,3,52,642,8,52,1,52,5,52,645,8,52,10,52,12,52,648,9,52,1,53,1,
		53,3,53,652,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,5,55,661,8,55,10,55,
		12,55,664,9,55,1,56,5,56,667,8,56,10,56,12,56,670,9,56,1,56,1,56,3,56,
		674,8,56,1,56,1,56,1,57,5,57,679,8,57,10,57,12,57,682,9,57,1,57,1,57,3,
		57,686,8,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,61,1,61,
		1,61,1,61,1,62,1,62,3,62,704,8,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,5,
		64,713,8,64,10,64,12,64,716,9,64,1,65,3,65,719,8,65,1,65,1,65,1,65,3,65,
		724,8,65,1,65,1,65,1,65,1,65,1,65,3,65,731,8,65,1,65,1,65,1,65,3,65,736,
		8,65,1,65,1,65,1,65,1,65,1,65,3,65,743,8,65,1,65,1,65,1,65,3,65,748,8,
		65,1,65,1,65,3,65,752,8,65,1,66,1,66,1,66,1,66,1,66,5,66,759,8,66,10,66,
		12,66,762,9,66,1,66,1,66,1,66,1,66,1,66,5,66,769,8,66,10,66,12,66,772,
		9,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,781,8,66,1,66,1,66,1,66,3,
		66,786,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,1,66,1,66,1,66,5,66,832,8,66,10,66,12,66,835,9,66,1,66,3,66,838,8,
		66,1,66,1,66,1,66,3,66,843,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,
		852,8,66,10,66,12,66,855,9,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
		1,67,1,67,1,67,1,67,3,67,869,8,67,1,67,1,67,1,67,3,67,874,8,67,1,68,1,
		68,1,68,1,68,1,68,1,68,1,68,3,68,883,8,68,3,68,885,8,68,1,69,1,69,3,69,
		889,8,69,1,69,1,69,1,69,3,69,894,8,69,5,69,896,8,69,10,69,12,69,899,9,
		69,1,69,3,69,902,8,69,1,70,1,70,3,70,906,8,70,1,70,1,70,1,71,1,71,1,71,
		1,71,5,71,914,8,71,10,71,12,71,917,9,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,5,71,926,8,71,10,71,12,71,929,9,71,1,71,1,71,5,71,933,8,71,10,71,
		12,71,936,9,71,3,71,938,8,71,1,72,3,72,941,8,72,1,73,3,73,944,8,73,1,73,
		1,73,1,74,1,74,1,74,3,74,951,8,74,1,75,1,75,1,75,3,75,956,8,75,1,76,1,
		76,1,76,1,76,1,77,1,77,1,77,5,77,965,8,77,10,77,12,77,968,9,77,1,78,1,
		78,1,79,1,79,3,79,974,8,79,1,79,1,79,5,79,978,8,79,10,79,12,79,981,9,79,
		1,80,1,80,1,81,1,81,1,81,1,81,5,81,989,8,81,10,81,12,81,992,9,81,1,81,
		5,81,995,8,81,10,81,12,81,998,9,81,1,82,5,82,1001,8,82,10,82,12,82,1004,
		9,82,1,82,1,82,3,82,1008,8,82,1,83,1,83,1,83,1,84,1,84,1,84,1,84,3,84,
		1017,8,84,1,85,1,85,3,85,1021,8,85,1,85,1,85,1,85,0,1,132,86,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,0,18,7,
		0,7,10,12,12,14,14,17,19,21,21,29,29,52,52,4,0,8,17,21,21,40,40,51,51,
		7,0,7,10,12,12,14,14,17,17,19,22,29,29,52,52,2,0,23,23,51,51,2,0,28,28,
		61,61,3,0,60,60,62,62,108,108,2,0,60,60,62,62,2,0,34,38,102,102,2,0,64,
		65,78,79,1,0,73,74,1,0,67,69,1,0,86,87,2,0,76,77,84,85,1,0,82,83,3,0,75,
		75,88,94,96,96,1,0,78,79,1,0,34,38,2,0,77,77,87,87,1107,0,176,1,0,0,0,
		2,181,1,0,0,0,4,183,1,0,0,0,6,185,1,0,0,0,8,187,1,0,0,0,10,191,1,0,0,0,
		12,193,1,0,0,0,14,203,1,0,0,0,16,206,1,0,0,0,18,217,1,0,0,0,20,220,1,0,
		0,0,22,227,1,0,0,0,24,245,1,0,0,0,26,250,1,0,0,0,28,261,1,0,0,0,30,288,
		1,0,0,0,32,291,1,0,0,0,34,314,1,0,0,0,36,318,1,0,0,0,38,321,1,0,0,0,40,
		337,1,0,0,0,42,345,1,0,0,0,44,350,1,0,0,0,46,361,1,0,0,0,48,367,1,0,0,
		0,50,377,1,0,0,0,52,382,1,0,0,0,54,391,1,0,0,0,56,399,1,0,0,0,58,401,1,
		0,0,0,60,425,1,0,0,0,62,427,1,0,0,0,64,429,1,0,0,0,66,431,1,0,0,0,68,435,
		1,0,0,0,70,437,1,0,0,0,72,439,1,0,0,0,74,457,1,0,0,0,76,459,1,0,0,0,78,
		473,1,0,0,0,80,486,1,0,0,0,82,532,1,0,0,0,84,534,1,0,0,0,86,542,1,0,0,
		0,88,550,1,0,0,0,90,565,1,0,0,0,92,570,1,0,0,0,94,578,1,0,0,0,96,586,1,
		0,0,0,98,592,1,0,0,0,100,610,1,0,0,0,102,630,1,0,0,0,104,633,1,0,0,0,106,
		651,1,0,0,0,108,653,1,0,0,0,110,657,1,0,0,0,112,668,1,0,0,0,114,680,1,
		0,0,0,116,687,1,0,0,0,118,690,1,0,0,0,120,695,1,0,0,0,122,697,1,0,0,0,
		124,703,1,0,0,0,126,705,1,0,0,0,128,709,1,0,0,0,130,751,1,0,0,0,132,780,
		1,0,0,0,134,873,1,0,0,0,136,884,1,0,0,0,138,901,1,0,0,0,140,903,1,0,0,
		0,142,909,1,0,0,0,144,940,1,0,0,0,146,943,1,0,0,0,148,950,1,0,0,0,150,
		955,1,0,0,0,152,957,1,0,0,0,154,961,1,0,0,0,156,969,1,0,0,0,158,973,1,
		0,0,0,160,982,1,0,0,0,162,984,1,0,0,0,164,1002,1,0,0,0,166,1009,1,0,0,
		0,168,1016,1,0,0,0,170,1018,1,0,0,0,172,175,3,10,5,0,173,175,3,30,15,0,
		174,172,1,0,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,
		1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,0,0,1,180,1,1,0,0,0,
		181,182,7,0,0,0,182,3,1,0,0,0,183,184,7,1,0,0,184,5,1,0,0,0,185,186,7,
		2,0,0,186,7,1,0,0,0,187,188,7,3,0,0,188,9,1,0,0,0,189,192,3,38,19,0,190,
		192,3,32,16,0,191,189,1,0,0,0,191,190,1,0,0,0,192,11,1,0,0,0,193,194,5,
		26,0,0,194,196,3,120,60,0,195,197,3,16,8,0,196,195,1,0,0,0,196,197,1,0,
		0,0,197,199,1,0,0,0,198,200,3,14,7,0,199,198,1,0,0,0,199,200,1,0,0,0,200,
		201,1,0,0,0,201,202,3,28,14,0,202,13,1,0,0,0,203,204,7,4,0,0,204,205,3,
		158,79,0,205,15,1,0,0,0,206,207,5,76,0,0,207,212,3,18,9,0,208,209,5,60,
		0,0,209,211,3,18,9,0,210,208,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,
		213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,77,0,0,216,17,1,
		0,0,0,217,218,3,36,18,0,218,219,3,120,60,0,219,19,1,0,0,0,220,221,5,27,
		0,0,221,223,3,120,60,0,222,224,3,14,7,0,223,222,1,0,0,0,223,224,1,0,0,
		0,224,225,1,0,0,0,225,226,3,22,11,0,226,21,1,0,0,0,227,241,5,53,0,0,228,
		235,3,24,12,0,229,231,7,5,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,
		1,0,0,0,232,234,3,24,12,0,233,230,1,0,0,0,234,237,1,0,0,0,235,233,1,0,
		0,0,235,236,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,238,240,7,6,0,0,239,
		238,1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,228,1,0,0,0,241,242,1,
		0,0,0,242,243,1,0,0,0,243,244,5,54,0,0,244,23,1,0,0,0,245,248,3,120,60,
		0,246,247,5,75,0,0,247,249,3,132,66,0,248,246,1,0,0,0,248,249,1,0,0,0,
		249,25,1,0,0,0,250,251,5,55,0,0,251,256,3,132,66,0,252,253,5,60,0,0,253,
		255,3,132,66,0,254,252,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,
		1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,260,5,56,0,0,260,27,1,0,0,
		0,261,266,5,53,0,0,262,265,5,62,0,0,263,265,3,10,5,0,264,262,1,0,0,0,264,
		263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,
		0,0,0,268,266,1,0,0,0,269,270,5,54,0,0,270,29,1,0,0,0,271,273,3,26,13,
		0,272,271,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,276,3,8,4,0,275,
		274,1,0,0,0,275,276,1,0,0,0,276,279,1,0,0,0,277,280,3,12,6,0,278,280,3,
		20,10,0,279,277,1,0,0,0,279,278,1,0,0,0,280,284,1,0,0,0,281,283,5,62,0,
		0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,
		289,1,0,0,0,286,284,1,0,0,0,287,289,5,62,0,0,288,272,1,0,0,0,288,287,1,
		0,0,0,289,31,1,0,0,0,290,292,3,26,13,0,291,290,1,0,0,0,291,292,1,0,0,0,
		292,296,1,0,0,0,293,295,3,4,2,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,
		1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,301,3,36,18,
		0,300,302,5,74,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,
		304,3,120,60,0,304,306,3,46,23,0,305,307,3,34,17,0,306,305,1,0,0,0,306,
		307,1,0,0,0,307,311,1,0,0,0,308,310,5,62,0,0,309,308,1,0,0,0,310,313,1,
		0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,33,1,0,0,0,313,311,1,0,0,0,314,
		315,3,78,39,0,315,35,1,0,0,0,316,319,3,158,79,0,317,319,5,39,0,0,318,316,
		1,0,0,0,318,317,1,0,0,0,319,37,1,0,0,0,320,322,3,26,13,0,321,320,1,0,0,
		0,321,322,1,0,0,0,322,326,1,0,0,0,323,325,3,2,1,0,324,323,1,0,0,0,325,
		328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,326,1,
		0,0,0,329,330,3,158,79,0,330,334,3,40,20,0,331,333,5,62,0,0,332,331,1,
		0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,39,1,0,0,0,336,
		334,1,0,0,0,337,342,3,42,21,0,338,339,5,60,0,0,339,341,3,42,21,0,340,338,
		1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,41,1,0,0,0,
		344,342,1,0,0,0,345,348,3,44,22,0,346,347,5,75,0,0,347,349,3,56,28,0,348,
		346,1,0,0,0,348,349,1,0,0,0,349,43,1,0,0,0,350,358,3,120,60,0,351,353,
		5,55,0,0,352,354,3,56,28,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,
		0,0,355,357,5,56,0,0,356,351,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,
		359,1,0,0,0,359,45,1,0,0,0,360,358,1,0,0,0,361,363,5,57,0,0,362,364,3,
		48,24,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,58,0,
		0,366,47,1,0,0,0,367,372,3,50,25,0,368,369,5,60,0,0,369,371,3,50,25,0,
		370,368,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,49,
		1,0,0,0,374,372,1,0,0,0,375,378,3,54,27,0,376,378,3,52,26,0,377,375,1,
		0,0,0,377,376,1,0,0,0,378,51,1,0,0,0,379,381,3,6,3,0,380,379,1,0,0,0,381,
		384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,
		0,0,0,385,386,3,36,18,0,386,387,3,44,22,0,387,53,1,0,0,0,388,390,3,6,3,
		0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,
		394,1,0,0,0,393,391,1,0,0,0,394,395,3,36,18,0,395,396,3,42,21,0,396,55,
		1,0,0,0,397,400,3,58,29,0,398,400,3,132,66,0,399,397,1,0,0,0,399,398,1,
		0,0,0,400,57,1,0,0,0,401,410,5,53,0,0,402,407,3,56,28,0,403,404,5,60,0,
		0,404,406,3,56,28,0,405,403,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,
		408,1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,410,402,1,0,0,0,410,411,1,
		0,0,0,411,415,1,0,0,0,412,414,5,60,0,0,413,412,1,0,0,0,414,417,1,0,0,0,
		415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,415,1,0,0,0,418,419,
		5,54,0,0,419,59,1,0,0,0,420,426,3,68,34,0,421,426,3,74,37,0,422,426,3,
		62,31,0,423,426,3,64,32,0,424,426,3,66,33,0,425,420,1,0,0,0,425,421,1,
		0,0,0,425,422,1,0,0,0,425,423,1,0,0,0,425,424,1,0,0,0,426,61,1,0,0,0,427,
		428,5,100,0,0,428,63,1,0,0,0,429,430,5,97,0,0,430,65,1,0,0,0,431,432,5,
		101,0,0,432,67,1,0,0,0,433,436,3,72,36,0,434,436,3,70,35,0,435,433,1,0,
		0,0,435,434,1,0,0,0,436,69,1,0,0,0,437,438,5,99,0,0,438,71,1,0,0,0,439,
		440,5,98,0,0,440,73,1,0,0,0,441,442,5,57,0,0,442,443,3,70,35,0,443,444,
		5,60,0,0,444,445,3,70,35,0,445,446,5,60,0,0,446,447,3,70,35,0,447,448,
		5,58,0,0,448,458,1,0,0,0,449,450,5,66,0,0,450,451,3,70,35,0,451,452,5,
		95,0,0,452,453,3,70,35,0,453,454,5,95,0,0,454,455,3,70,35,0,455,456,5,
		66,0,0,456,458,1,0,0,0,457,441,1,0,0,0,457,449,1,0,0,0,458,75,1,0,0,0,
		459,461,3,120,60,0,460,462,3,162,81,0,461,460,1,0,0,0,461,462,1,0,0,0,
		462,470,1,0,0,0,463,464,5,59,0,0,464,466,3,120,60,0,465,467,3,162,81,0,
		466,465,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,463,1,0,0,0,469,472,
		1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,77,1,0,0,0,472,470,1,0,0,0,
		473,477,5,53,0,0,474,476,3,80,40,0,475,474,1,0,0,0,476,479,1,0,0,0,477,
		475,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,5,
		54,0,0,481,79,1,0,0,0,482,483,3,114,57,0,483,484,5,62,0,0,484,487,1,0,
		0,0,485,487,3,82,41,0,486,482,1,0,0,0,486,485,1,0,0,0,487,81,1,0,0,0,488,
		533,3,84,42,0,489,533,3,86,43,0,490,533,3,88,44,0,491,533,3,92,46,0,492,
		533,3,94,47,0,493,533,3,96,48,0,494,533,3,98,49,0,495,533,3,78,39,0,496,
		498,5,30,0,0,497,499,3,132,66,0,498,497,1,0,0,0,498,499,1,0,0,0,499,503,
		1,0,0,0,500,502,5,62,0,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,
		0,503,504,1,0,0,0,504,533,1,0,0,0,505,503,1,0,0,0,506,510,5,45,0,0,507,
		509,5,62,0,0,508,507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,
		0,0,0,511,533,1,0,0,0,512,510,1,0,0,0,513,517,5,49,0,0,514,516,5,62,0,
		0,515,514,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,
		533,1,0,0,0,519,517,1,0,0,0,520,524,3,132,66,0,521,523,5,62,0,0,522,521,
		1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,533,1,0,0,
		0,526,524,1,0,0,0,527,528,3,120,60,0,528,529,5,61,0,0,529,530,3,82,41,
		0,530,533,1,0,0,0,531,533,5,62,0,0,532,488,1,0,0,0,532,489,1,0,0,0,532,
		490,1,0,0,0,532,491,1,0,0,0,532,492,1,0,0,0,532,493,1,0,0,0,532,494,1,
		0,0,0,532,495,1,0,0,0,532,496,1,0,0,0,532,506,1,0,0,0,532,513,1,0,0,0,
		532,520,1,0,0,0,532,527,1,0,0,0,532,531,1,0,0,0,533,83,1,0,0,0,534,535,
		5,25,0,0,535,539,3,132,66,0,536,538,5,62,0,0,537,536,1,0,0,0,538,541,1,
		0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,85,1,0,0,0,541,539,1,0,0,0,542,
		543,5,33,0,0,543,547,3,132,66,0,544,546,5,62,0,0,545,544,1,0,0,0,546,549,
		1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,548,87,1,0,0,0,549,547,1,0,0,0,
		550,551,5,41,0,0,551,554,3,122,61,0,552,555,3,80,40,0,553,555,3,78,39,
		0,554,552,1,0,0,0,554,553,1,0,0,0,555,557,1,0,0,0,556,558,3,90,45,0,557,
		556,1,0,0,0,557,558,1,0,0,0,558,562,1,0,0,0,559,561,5,62,0,0,560,559,1,
		0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,89,1,0,0,0,564,
		562,1,0,0,0,565,568,5,42,0,0,566,569,3,80,40,0,567,569,3,78,39,0,568,566,
		1,0,0,0,568,567,1,0,0,0,569,91,1,0,0,0,570,571,5,46,0,0,571,572,5,57,0,
		0,572,573,3,104,52,0,573,576,5,58,0,0,574,577,3,80,40,0,575,577,3,78,39,
		0,576,574,1,0,0,0,576,575,1,0,0,0,577,93,1,0,0,0,578,579,5,47,0,0,579,
		580,5,57,0,0,580,581,3,108,54,0,581,584,5,58,0,0,582,585,3,80,40,0,583,
		585,3,78,39,0,584,582,1,0,0,0,584,583,1,0,0,0,585,95,1,0,0,0,586,587,5,
		48,0,0,587,590,3,122,61,0,588,591,3,80,40,0,589,591,3,78,39,0,590,588,
		1,0,0,0,590,589,1,0,0,0,591,97,1,0,0,0,592,593,5,43,0,0,593,594,3,122,
		61,0,594,598,5,53,0,0,595,597,3,100,50,0,596,595,1,0,0,0,597,600,1,0,0,
		0,598,596,1,0,0,0,598,599,1,0,0,0,599,604,1,0,0,0,600,598,1,0,0,0,601,
		603,3,102,51,0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,
		1,0,0,0,605,607,1,0,0,0,606,604,1,0,0,0,607,608,5,54,0,0,608,99,1,0,0,
		0,609,611,3,102,51,0,610,609,1,0,0,0,611,612,1,0,0,0,612,610,1,0,0,0,612,
		613,1,0,0,0,613,615,1,0,0,0,614,616,3,80,40,0,615,614,1,0,0,0,616,617,
		1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,101,1,0,0,0,619,625,5,44,0,
		0,620,626,3,132,66,0,621,626,5,102,0,0,622,623,3,158,79,0,623,624,3,120,
		60,0,624,626,1,0,0,0,625,620,1,0,0,0,625,621,1,0,0,0,625,622,1,0,0,0,626,
		627,1,0,0,0,627,631,5,61,0,0,628,629,5,50,0,0,629,631,5,61,0,0,630,619,
		1,0,0,0,630,628,1,0,0,0,631,103,1,0,0,0,632,634,3,106,53,0,633,632,1,0,
		0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,637,5,62,0,0,636,638,3,132,66,
		0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,641,5,62,0,0,640,
		642,3,128,64,0,641,640,1,0,0,0,641,642,1,0,0,0,642,646,1,0,0,0,643,645,
		5,62,0,0,644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,
		0,647,105,1,0,0,0,648,646,1,0,0,0,649,652,3,114,57,0,650,652,3,128,64,
		0,651,649,1,0,0,0,651,650,1,0,0,0,652,107,1,0,0,0,653,654,3,110,55,0,654,
		655,5,61,0,0,655,656,3,132,66,0,656,109,1,0,0,0,657,662,3,112,56,0,658,
		659,5,60,0,0,659,661,3,112,56,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,
		1,0,0,0,662,663,1,0,0,0,663,111,1,0,0,0,664,662,1,0,0,0,665,667,3,2,1,
		0,666,665,1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,1,0,0,0,669,
		673,1,0,0,0,670,668,1,0,0,0,671,674,3,158,79,0,672,674,5,6,0,0,673,671,
		1,0,0,0,673,672,1,0,0,0,674,675,1,0,0,0,675,676,3,44,22,0,676,113,1,0,
		0,0,677,679,3,2,1,0,678,677,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,
		681,1,0,0,0,681,685,1,0,0,0,682,680,1,0,0,0,683,686,3,116,58,0,684,686,
		3,118,59,0,685,683,1,0,0,0,685,684,1,0,0,0,686,115,1,0,0,0,687,688,3,158,
		79,0,688,689,3,40,20,0,689,117,1,0,0,0,690,691,5,6,0,0,691,692,3,120,60,
		0,692,693,5,75,0,0,693,694,3,132,66,0,694,119,1,0,0,0,695,696,7,7,0,0,
		696,121,1,0,0,0,697,698,5,57,0,0,698,699,3,132,66,0,699,700,5,58,0,0,700,
		123,1,0,0,0,701,704,3,132,66,0,702,704,3,126,63,0,703,701,1,0,0,0,703,
		702,1,0,0,0,704,125,1,0,0,0,705,706,3,120,60,0,706,707,5,61,0,0,707,708,
		3,132,66,0,708,127,1,0,0,0,709,714,3,124,62,0,710,711,5,60,0,0,711,713,
		3,124,62,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,
		0,0,715,129,1,0,0,0,716,714,1,0,0,0,717,719,5,73,0,0,718,717,1,0,0,0,718,
		719,1,0,0,0,719,720,1,0,0,0,720,721,3,120,60,0,721,723,5,57,0,0,722,724,
		3,128,64,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,5,58,
		0,0,726,752,1,0,0,0,727,728,5,31,0,0,728,730,5,59,0,0,729,731,5,73,0,0,
		730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,0,0,732,733,3,120,60,0,733,
		735,5,57,0,0,734,736,3,128,64,0,735,734,1,0,0,0,735,736,1,0,0,0,736,737,
		1,0,0,0,737,738,5,58,0,0,738,752,1,0,0,0,739,740,5,32,0,0,740,742,5,59,
		0,0,741,743,5,73,0,0,742,741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,
		745,3,120,60,0,745,747,5,57,0,0,746,748,3,128,64,0,747,746,1,0,0,0,747,
		748,1,0,0,0,748,749,1,0,0,0,749,750,5,58,0,0,750,752,1,0,0,0,751,718,1,
		0,0,0,751,727,1,0,0,0,751,739,1,0,0,0,752,131,1,0,0,0,753,754,6,66,-1,
		0,754,781,3,134,67,0,755,781,3,130,65,0,756,760,5,24,0,0,757,759,3,2,1,
		0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,
		763,1,0,0,0,762,760,1,0,0,0,763,781,3,136,68,0,764,765,5,57,0,0,765,770,
		3,158,79,0,766,767,5,70,0,0,767,769,3,158,79,0,768,766,1,0,0,0,769,772,
		1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,770,1,0,0,
		0,773,774,5,58,0,0,774,775,3,132,66,17,775,781,1,0,0,0,776,777,7,8,0,0,
		777,781,3,132,66,15,778,779,7,9,0,0,779,781,3,132,66,14,780,753,1,0,0,
		0,780,755,1,0,0,0,780,756,1,0,0,0,780,764,1,0,0,0,780,776,1,0,0,0,780,
		778,1,0,0,0,781,853,1,0,0,0,782,785,10,13,0,0,783,786,5,102,0,0,784,786,
		3,122,61,0,785,783,1,0,0,0,785,784,1,0,0,0,786,787,1,0,0,0,787,852,3,132,
		66,14,788,789,10,12,0,0,789,790,5,72,0,0,790,852,3,132,66,13,791,792,10,
		11,0,0,792,793,7,10,0,0,793,852,3,132,66,12,794,795,10,10,0,0,795,796,
		7,8,0,0,796,852,3,132,66,11,797,798,10,9,0,0,798,799,7,11,0,0,799,852,
		3,132,66,10,800,801,10,8,0,0,801,802,7,12,0,0,802,852,3,132,66,9,803,804,
		10,7,0,0,804,805,7,13,0,0,805,852,3,132,66,8,806,807,10,6,0,0,807,808,
		5,70,0,0,808,852,3,132,66,7,809,810,10,5,0,0,810,811,5,74,0,0,811,852,
		3,132,66,6,812,813,10,4,0,0,813,814,5,71,0,0,814,852,3,132,66,5,815,816,
		10,3,0,0,816,817,5,80,0,0,817,852,3,132,66,4,818,819,10,2,0,0,819,820,
		5,81,0,0,820,852,3,132,66,3,821,822,10,1,0,0,822,823,7,14,0,0,823,852,
		3,132,66,1,824,825,10,21,0,0,825,842,5,59,0,0,826,843,3,120,60,0,827,843,
		3,130,65,0,828,843,5,31,0,0,829,833,5,24,0,0,830,832,3,2,1,0,831,830,1,
		0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,837,1,0,0,0,
		835,833,1,0,0,0,836,838,3,152,76,0,837,836,1,0,0,0,837,838,1,0,0,0,838,
		839,1,0,0,0,839,843,3,140,70,0,840,843,3,166,83,0,841,843,3,146,73,0,842,
		826,1,0,0,0,842,827,1,0,0,0,842,828,1,0,0,0,842,829,1,0,0,0,842,840,1,
		0,0,0,842,841,1,0,0,0,843,852,1,0,0,0,844,845,10,20,0,0,845,846,5,55,0,
		0,846,847,3,132,66,0,847,848,5,56,0,0,848,852,1,0,0,0,849,850,10,16,0,
		0,850,852,7,15,0,0,851,782,1,0,0,0,851,788,1,0,0,0,851,791,1,0,0,0,851,
		794,1,0,0,0,851,797,1,0,0,0,851,800,1,0,0,0,851,803,1,0,0,0,851,806,1,
		0,0,0,851,809,1,0,0,0,851,812,1,0,0,0,851,815,1,0,0,0,851,818,1,0,0,0,
		851,821,1,0,0,0,851,824,1,0,0,0,851,844,1,0,0,0,851,849,1,0,0,0,852,855,
		1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,133,1,0,0,0,855,853,1,0,0,
		0,856,857,5,57,0,0,857,858,3,132,66,0,858,859,5,58,0,0,859,874,1,0,0,0,
		860,874,5,31,0,0,861,874,3,58,29,0,862,874,3,60,30,0,863,864,3,120,60,
		0,864,865,3,162,81,0,865,874,1,0,0,0,866,869,3,120,60,0,867,869,3,160,
		80,0,868,866,1,0,0,0,868,867,1,0,0,0,869,874,1,0,0,0,870,871,3,152,76,
		0,871,872,3,168,84,0,872,874,1,0,0,0,873,856,1,0,0,0,873,860,1,0,0,0,873,
		861,1,0,0,0,873,862,1,0,0,0,873,863,1,0,0,0,873,868,1,0,0,0,873,870,1,
		0,0,0,874,135,1,0,0,0,875,876,3,152,76,0,876,877,3,138,69,0,877,878,3,
		144,72,0,878,885,1,0,0,0,879,882,3,138,69,0,880,883,3,142,71,0,881,883,
		3,144,72,0,882,880,1,0,0,0,882,881,1,0,0,0,883,885,1,0,0,0,884,875,1,0,
		0,0,884,879,1,0,0,0,885,137,1,0,0,0,886,888,3,120,60,0,887,889,3,148,74,
		0,888,887,1,0,0,0,888,889,1,0,0,0,889,897,1,0,0,0,890,891,5,59,0,0,891,
		893,3,120,60,0,892,894,3,148,74,0,893,892,1,0,0,0,893,894,1,0,0,0,894,
		896,1,0,0,0,895,890,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,897,898,1,
		0,0,0,898,902,1,0,0,0,899,897,1,0,0,0,900,902,3,160,80,0,901,886,1,0,0,
		0,901,900,1,0,0,0,902,139,1,0,0,0,903,905,3,120,60,0,904,906,3,150,75,
		0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,908,3,144,72,0,908,
		141,1,0,0,0,909,937,5,55,0,0,910,915,5,56,0,0,911,912,5,55,0,0,912,914,
		5,56,0,0,913,911,1,0,0,0,914,917,1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,
		0,916,918,1,0,0,0,917,915,1,0,0,0,918,938,3,58,29,0,919,920,3,132,66,0,
		920,927,5,56,0,0,921,922,5,55,0,0,922,923,3,132,66,0,923,924,5,56,0,0,
		924,926,1,0,0,0,925,921,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,
		1,0,0,0,928,934,1,0,0,0,929,927,1,0,0,0,930,931,5,55,0,0,931,933,5,56,
		0,0,932,930,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,
		938,1,0,0,0,936,934,1,0,0,0,937,910,1,0,0,0,937,919,1,0,0,0,938,143,1,
		0,0,0,939,941,3,170,85,0,940,939,1,0,0,0,940,941,1,0,0,0,941,145,1,0,0,
		0,942,944,3,152,76,0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,
		946,3,168,84,0,946,147,1,0,0,0,947,948,5,76,0,0,948,951,5,77,0,0,949,951,
		3,162,81,0,950,947,1,0,0,0,950,949,1,0,0,0,951,149,1,0,0,0,952,953,5,76,
		0,0,953,956,5,77,0,0,954,956,3,152,76,0,955,952,1,0,0,0,955,954,1,0,0,
		0,956,151,1,0,0,0,957,958,5,76,0,0,958,959,3,154,77,0,959,960,5,77,0,0,
		960,153,1,0,0,0,961,966,3,156,78,0,962,963,5,60,0,0,963,965,3,156,78,0,
		964,962,1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,155,
		1,0,0,0,968,966,1,0,0,0,969,970,3,158,79,0,970,157,1,0,0,0,971,974,3,76,
		38,0,972,974,3,160,80,0,973,971,1,0,0,0,973,972,1,0,0,0,974,979,1,0,0,
		0,975,976,5,55,0,0,976,978,5,56,0,0,977,975,1,0,0,0,978,981,1,0,0,0,979,
		977,1,0,0,0,979,980,1,0,0,0,980,159,1,0,0,0,981,979,1,0,0,0,982,983,7,
		16,0,0,983,161,1,0,0,0,984,985,5,76,0,0,985,990,3,164,82,0,986,987,5,60,
		0,0,987,989,3,164,82,0,988,986,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,
		990,991,1,0,0,0,991,996,1,0,0,0,992,990,1,0,0,0,993,995,7,17,0,0,994,993,
		1,0,0,0,995,998,1,0,0,0,996,994,1,0,0,0,996,997,1,0,0,0,997,163,1,0,0,
		0,998,996,1,0,0,0,999,1001,3,2,1,0,1000,999,1,0,0,0,1001,1004,1,0,0,0,
		1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1007,1,0,0,0,1004,1002,1,0,0,
		0,1005,1008,3,158,79,0,1006,1008,3,120,60,0,1007,1005,1,0,0,0,1007,1006,
		1,0,0,0,1008,165,1,0,0,0,1009,1010,5,59,0,0,1010,1011,3,130,65,0,1011,
		167,1,0,0,0,1012,1017,1,0,0,0,1013,1014,3,120,60,0,1014,1015,3,170,85,
		0,1015,1017,1,0,0,0,1016,1012,1,0,0,0,1016,1013,1,0,0,0,1017,169,1,0,0,
		0,1018,1020,5,57,0,0,1019,1021,3,128,64,0,1020,1019,1,0,0,0,1020,1021,
		1,0,0,0,1021,1022,1,0,0,0,1022,1023,5,58,0,0,1023,171,1,0,0,0,125,174,
		176,191,196,199,212,223,230,235,239,241,248,256,264,266,272,275,279,284,
		288,291,296,301,306,311,318,321,326,334,342,348,353,358,363,372,377,382,
		391,399,407,410,415,425,435,457,461,466,470,477,486,498,503,510,517,524,
		532,539,547,554,557,562,568,576,584,590,598,604,612,617,625,630,633,637,
		641,646,651,662,668,673,680,685,703,714,718,723,730,735,742,747,751,760,
		770,780,785,833,837,842,851,853,868,873,882,884,888,893,897,901,905,915,
		927,934,937,940,943,950,955,966,973,979,990,996,1002,1007,1016,1020
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
